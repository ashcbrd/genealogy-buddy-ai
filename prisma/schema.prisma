generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

enum SubscriptionTier {
  FREE
  EXPLORER
  RESEARCHER
  PROFESSIONAL
}

enum AnalysisType {
  DOCUMENT
  DNA
  FAMILY_TREE
  RESEARCH
  PHOTO
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  email            String             @unique
  emailVerified    DateTime?
  name             String?
  password         String?
  image           String?
  provider        String?
  
  // Profile information (populated from Google auth or manual input)
  firstName       String?
  lastName        String?
  bio             String?            @db.Text
  location        String?
  dateOfBirth     DateTime?
  phoneNumber     String?
  website         String?
  
  // Genealogy-specific profile fields
  researchInterests String[]         // Array of research interests
  familyOrigins   String[]           // Array of family origins/countries
  languages       String[]           // Languages spoken
  
  // Privacy settings
  profilePublic   Boolean            @default(false)
  allowContact    Boolean            @default(true)
  
  accounts        Account[]
  sessions        Session[]
  subscription     Subscription?
  usage           Usage[]
  documents       Document[]
  familyTrees     FamilyTree[]
  analyses        Analysis[]
  photos          Photo[]
  researchChats   ResearchChat[]
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  deletedAt       DateTime?
}

model Subscription {
  id               String            @id @default(cuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tier            SubscriptionTier   @default(FREE)
  stripeCustomerId String?           @unique
  stripeSubscriptionId String?       @unique
  stripePriceId   String?
  
  currentPeriodStart DateTime?
  currentPeriodEnd DateTime?
  canceledAt      DateTime?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Usage {
  id              String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type           AnalysisType
  count          Int               @default(0)
  period         DateTime          @default(now())
  
  createdAt      DateTime          @default(now())
  
  @@unique([userId, type, period])
  @@index([userId, period])
}

model Document {
  id              String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  filename       String
  storagePath    String
  mimeType       String
  size           Int
  
  ocrText        String?           @db.Text
  analysis       Analysis?
  
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
}

model FamilyTree {
  id              String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name           String
  data           Json
  individuals    Individual[]
  
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
}

model Individual {
  id              String            @id @default(cuid())
  treeId         String
  tree           FamilyTree        @relation(fields: [treeId], references: [id], onDelete: Cascade)
  
  firstName      String?
  lastName       String?
  birthDate      DateTime?
  deathDate      DateTime?
  birthPlace     String?
  deathPlace     String?
  
  fatherId       String?
  father         Individual?       @relation("FatherChild", fields: [fatherId], references: [id])
  motherId       String?
  mother         Individual?       @relation("MotherChild", fields: [motherId], references: [id])
  
  children       Individual[]      @relation("FatherChild")
  motherChildren Individual[]      @relation("MotherChild")
  
  confidence     Float             @default(1.0)
  aiGenerated    Boolean           @default(false)
  
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Analysis {
  id              String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type           AnalysisType
  documentId     String?           @unique
  document       Document?         @relation(fields: [documentId], references: [id])
  
  input          Json
  result         Json
  confidence     Float?
  suggestions    Json?
  
  claudeTokensUsed Int              @default(0)
  
  createdAt      DateTime          @default(now())
  deletedAt      DateTime?
}

model Photo {
  id                   String            @id @default(cuid())
  userId              String
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  filename            String
  storagePath         String
  enhancedStoragePath String?
  
  metadata            Json?
  story               String?           @db.Text
  historicalContext   String?           @db.Text
  dateSuggestion      String?
  
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
}

model ResearchChat {
  id              String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messages       Json
  context        Json?
  
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   // Email address
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  
  @@unique([identifier, token])
  @@index([token])
  @@index([identifier])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String   // Email address  
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  
  @@unique([identifier, token])
  @@index([token])
  @@index([identifier])
}